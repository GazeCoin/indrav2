name: CD Staging

on:
  push:
    branches:
      - staging

jobs:
  build:
    env:
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: .npm
        key: npm-${{ hashFiles('package-lock.json') }}
        restore-keys: npm-
    - run: make pull-latest
    - run: make staging
    - run: make build-report
    - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
    - run: make push-commit

  test-cf:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: make cf-core
    - run: make test-cf

  test-store:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: make store
    - run: make test-store

#   test-watcher:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v1
#     - run: make watcher
#     - run: make test-watcher

  test-contracts:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: .npm
        key: npm-${{ hashFiles('package-lock.json') }}
        restore-keys: npm-
    - run: make contracts
    - run: make test-contracts

  test-utils:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: .npm
        key: npm-${{ hashFiles('package-lock.json') }}
        restore-keys: npm-
    - run: make utils
    - run: make test-utils
  
  test-node:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: make node
    - run: make test-node

  test-ssh:
    env:
      STAGING_DOMAINNAME: staging.indra.connext.network
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: test connection to staging
      uses: ./ops/ssh-action/
      with:
        HOST: ubuntu@${{ env.STAGING_DOMAINNAME }}
        SSH_KEY: ${{ secrets.SSH_KEY }}
        CMD: 'echo Successfully connected to $STAGING_DOMAINNAME: `hostname`;'

#  test-bot-farm:
#    runs-on: ubuntu-latest
#    needs: [build]
#    steps:
#    - uses: actions/checkout@v1
#    - run: make pull-commit
#    - run: make start-test-staging
#    - run: sleep 15 && make dls
#    - run: make test-bot-farm
#    - name: Print logs
#      if: failure()
#      run: docker service logs --tail 200 indra_node && docker service logs --tail 200 indra_proxy

  test-integration:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v1
    - run: make pull-commit
    - run: make start-test-staging
    - run: sleep 15 && make dls
    - run: TEST_MODE=staging make test-integration
    - name: Print logs
      if: failure()
      run: docker service logs --tail 200 indra_node && docker service logs --tail 200 indra_proxy

  test-backwards-compatibility:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v1
    - run: make pull-commit
    - run: make start-test-staging
    - run: sleep 15 && make dls
    - run: make test-backwards-compatibility
    - name: Print logs
      if: failure()
      run: docker service logs --tail 200 indra_node && docker service logs --tail 200 indra_proxy

  test-daicard:
    runs-on: ubuntu-16.04
    needs: [build]
    steps:
    - uses: actions/checkout@v1
    - run: make pull-commit
    - run: make start-test-staging
    - run: make test-daicard
    - name: Print logs
      if: failure()
      run: docker service logs --tail 200 indra_node && docker service logs --tail 200 indra_proxy

  deploy-staging:
    env:
      STAGING_DOMAINNAME: staging.indra.connext.network
    needs: [test-cf, test-contracts, test-utils, test-daicard, test-integration, test-node, test-ssh]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: deploy to staging
      uses: ./ops/ssh-action/
      with:
        HOST: ubuntu@${{ env.STAGING_DOMAINNAME }}
        SSH_KEY: ${{ secrets.SSH_KEY }}
        CMD: '
          git checkout --force staging;
          git reset --hard $GITHUB_SHA;
          export INDRA_DOMAINNAME="$STAGING_DOMAINNAME";
          export INDRA_MODE="staging";
          make restart-prod;
          docker container prune -f;
          docker image ls -q | xargs docker image rm || true;
        '
