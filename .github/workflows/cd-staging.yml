name: CD Staging

on:
  push:
    branches:
      - staging

jobs:

  build:
    env:
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make pull-latest
      - run: make all
      - run: make build-report
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - run: make push

  test-ssh:
    env:
      STAGING_DOMAINNAME: staging.indra.connext.network
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: test connection to staging
        uses: ./ops/ssh-action/
        with:
          HOST: ubuntu@${{ env.STAGING_DOMAINNAME }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          CMD: 'echo Successfully connected to $STAGING_DOMAINNAME: `hostname`;'

  test-utils:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make utils
      - run: make test-utils

  test-store:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make store
      - run: make test-store

  test-contracts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make contracts
      - run: make test-contracts

  test-cf:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make cf-core
      - run: make test-cf

  test-watcher:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make watcher
      - run: make test-watcher

  test-node:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make node
      - run: make test-node

  test-tps:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v1
      - run: make pull
      - run: make start-prod
      - run: make dls
      - run: make test-tps-prod
      - name: Print logs
        if: failure()
        run: docker service logs --tail 200 indra_node && docker service logs --tail 200 indra_proxy

  test-integration:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v1
      - run: make pull
      - run: make start-prod
      - run: make dls
      - run: make test-integration-prod
      - name: Print logs
        if: failure()
        run: docker service logs --tail 200 indra_node && docker service logs --tail 200 indra_proxy

  test-backwards-compatibility:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v1
      - run: make pull
      - run: make start-prod
      - run: make dls
      - run: make test-backwards-compatibility
      - name: Print logs
        if: failure()
        run: docker service logs --tail 200 indra_node && docker service logs --tail 200 indra_proxy

  test-daicard:
    runs-on: ubuntu-16.04
    needs: [build]
    steps:
      - uses: actions/checkout@v1
      - run: make pull
      - run: make start-prod
      - run: make start-daicard
      - run: make dls
      - run: make test-daicard
      - name: Print logs
        if: failure()
        run: docker service logs --tail 200 indra_node && docker service logs --tail 200 indra_proxy

  deploy-staging:
    env:
      STAGING_DOMAINNAME: staging.indra.connext.network
    needs: [test-utils, test-store, test-contracts, test-cf, test-watcher, test-node, test-ssh, test-integration, test-daicard]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: deploy to staging
        uses: ./ops/ssh-action/
        with:
          HOST: ubuntu@${{ env.STAGING_DOMAINNAME }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          CMD: '
            git checkout --force staging;
            git reset --hard $GITHUB_SHA;
            export INDRA_ENV="prod";
            export INDRA_DOMAINNAME="$STAGING_DOMAINNAME";
            make restart-prod;
            docker container prune -f;
            docker image ls -q | xargs docker image rm -f || true;
          '
